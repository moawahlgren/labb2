package psmodel;

import cardutils.*;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author SaraRoempke & MoaWahlgren
 */
public class PsLogic implements IPsLogic {
    
    private Card nextCard;
    private List<Pile> thePiles;
    Deck deck;
    
    // skapar en List med fem Pile 
    @Override
    public void initNewGame(){
        deck = new Deck();
        deck.shuffleCards();
        Pile pilezero = new Pile(); 
        Pile pileone = new Pile(); 
        Pile piletwo = new Pile(); 
        Pile pilethree = new Pile(); 
        Pile pilefour = new Pile(); 
        thePiles = new ArrayList<>(5); 
        thePiles.add(pilezero); 
        thePiles.add(pileone);
        thePiles.add(piletwo); 
        thePiles.add(pilethree); 
        thePiles.add(pilefour);
        nextCard = null;
    }

    // Kastar exception om tidigare plockat kort ej adderats till en Pile
    @Override
    public Card pickNextCard() throws IllegalStateException {
        if(nextCard != null){
            throw new IllegalStateException();
        }
        nextCard = deck.dealCard();
        return nextCard;
    }

    // Kastar exception om inget kort dragits
    @Override
    public void addCardToPile(int n) throws IllegalStateException { 
        if(nextCard == null){
            throw new IllegalStateException();
        }
        
        Pile thisPile = thePiles.get(n); 
        thisPile.add(nextCard);
        nextCard = null;
        
    }

    @Override
    public boolean isGameOver() {
        boolean gameOver = false;
        if(getCardCount() == 25){
            gameOver = true;
        }
        return gameOver;
    }

    //Ränkar korten i alla fem Piles
    @Override
    public int getCardCount() {
        int cardCount = 0; 
        for(int i=0; i<thePiles.size(); i++) {
            Pile thisPile = thePiles.get(i);
            cardCount += thisPile.getSize(); 
        }
       
       return cardCount;
    }

    //Returnerar en kopia på private List
    @Override
    public List<Pile> getPiles() {
        List<Pile> copy = new ArrayList<>(thePiles);  
      
        return copy; 
    }

    @Override
    public int getPoints() {
        int points = 0;
        
        for(int i=0; i<thePiles.size(); i++) {
            Pile thisPile = thePiles.get(i); 
            if(PokerHands.getPokerCombo(thisPile) == PokerCombo.NONE) {
                points += 0;
            }
            if(PokerHands.getPokerCombo(thisPile) == PokerCombo.PAIR) {
                points += 1; 
            }
            if(PokerHands.getPokerCombo(thisPile) == PokerCombo.TWO_PAIRS) {
                points += 3; 
            }
            if(PokerHands.getPokerCombo(thisPile) == PokerCombo.THREE_OF_A_KIND) {
                points += 6; 
            }
            if(PokerHands.getPokerCombo(thisPile) == PokerCombo.FOUR_OF_A_KIND) {
                points += 16;
            }
            if(PokerHands.getPokerCombo(thisPile) == PokerCombo.FLUSH) {
                points += 5; 
            }   
        }
        return points;
    }
    
}


